// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Press F9 to execute the 'go' function...
// Press F10 to run the full test suite

function go():Any[*]
{
  // meta::pure::mapping::modelToModel::test::alloy::simple::simpleSerializeOfOneObject() ;

  	  let input = {| [1,2]->fold({index, acc | $acc->concatenate($index);}, [])};
      let foldLambda = $input->evaluateAndDeactivate().expressionSequence->cast(@SimpleFunctionExpression).parametersValues->at(1)->cast(@InstanceValue).values->cast(@FunctionDefinition<Any>)->toOne();

      // let foldLambda = $input->evaluateAndDeactivate().expressionSequence->cast(@SimpleFunctionExpression).parametersValues->at(1)->cast(@InstanceValue).values->cast(@LambdaFunction<{Integer[1], Integer[0]->Integer[*]}>)->toOne();

      let foldLambdaAccParam = $foldLambda->functionType().parameters->at(1);


      println($foldLambdaAccParam); fail();
	  assertEquals(ZeroMany, $input->functionReturnMultiplicity(), 'Origin lambda return multiplicity expected (zero many))');
	  assertEquals($foldLambda->functionReturnMultiplicity(), $input->functionReturnMultiplicity(), 'good');

    assertEquals($foldLambda->functionReturnMultiplicity(), $foldLambdaAccParam.multiplicity, 'foldLambda : %r, foldLambdaAccParam: %r', [$foldLambda->functionReturnMultiplicity(), $foldLambdaAccParam.multiplicity]);




    print('ok',1);
}

import meta::external::shared::format::metamodel::*;
import meta::external::format::flatdata::metamodel::*;
import meta::external::format::flatdata::binding::validation::test::*;


Class meta::external::format::flatdata::binding::validation::test::WholeFile {}

Class meta::external::format::flatdata::binding::validation::test::Header
{
  date:String[1];
}

Class meta::external::format::flatdata::binding::validation::test::Row
{
  id : Integer[1];
  value : String[1];
}

Association meta::external::format::flatdata::binding::validation::test::FileHeader
{
  file : WholeFile[1];
  header : Header[1];
}

Association meta::external::format::flatdata::binding::validation::test::FileRow
{
  file : WholeFile[1];
  row : Row[*];
}




function meta::external::format::flatdata::binding::validation::test::matcher():Boolean[1]
{
  let schema = ^SchemaSet(
    name = 'TestSchema',
    package = meta::external::format::flatdata::binding::validation::test,
    format = 'FlatData',
    schemas = ^Schema(
                id = 'default.flatdata',
                detail = ^FlatData(
                          sections = [
                            ^FlatDataSection(
                              name = 'Header',
                              driverId = 'DelimitedWithoutHeadings',
                              sectionProperties = [
                                ^FlatDataProperty(name = 'delimiter', value = ' '),
                                ^FlatDataProperty(name = 'scope.forNumberOfLines', value = 1)
                              ],
                              recordType = ^FlatDataRecordType(
                                              fields = [
                                                ^FlatDataRecordField(label = 'date', address = '3', type = ^FlatDataDate(format = 'yyyyMMdd', optional=false))
                                              ]
                              )
                            ),
                            ^FlatDataSection(
                              name = 'dataRows', 
                              driverId = 'DelimitedWithoutHeadings',
                              sectionProperties = [
                                ^FlatDataProperty(name = 'delimiter', value = '~'),
                                ^FlatDataProperty(name = 'scope.default', value = true),
                                ^FlatDataProperty(name = 'recordSeparator', value = '\r\n')
                              ],
                              recordType = ^FlatDataRecordType(
                                fields = [
                                  ^FlatDataRecordField(label = 'id', address = '1', type = ^FlatDataInteger(optional = false)),
                                  ^FlatDataRecordField(label = 'value', address = '2', type = ^FlatDataString(optional = false))
                                ]
                              )
                            ),
                            ^FlatDataSection(
                              name = 'footer', 
                              driverId = 'ImmaterialLines',
                              sectionProperties = [
                                ^FlatDataProperty(name = 'scope.forNumberOfLines', value = 1)
                              ]
                            )

                          ]
                        )
              )
  );

  true;
} 